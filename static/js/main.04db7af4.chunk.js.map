{"version":3,"sources":["serviceWorker.js","views/Header.js","request/ContentsListRequest.js","views/CardView.js","views/NextButton.js","views/ContentsList.js","views/Search.js","views/MoaView.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","clickBtnMenu","bind","state","isShow","e","preventDefault","this","setState","props","className","href","onClick","xmlns","width","height","viewBox","d","React","Component","ContentsListRequest","param","callback","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","then","res","json","response","catch","error","console","CardView","thumbnailUrl","contents","title","siteName","site","targetContentsName","year","regDate","monthValue","dayOfMonth","hour","minute","second","thumbnailClassName","length","thumbnail","src","alt","url","target","rel","clickCardView","NextButton","CardViewList","clickBtnNext","contentsListRequestCallback","clickBtnNextCallback","contentsTypeNoList","pageNo","responseContents","contentsTypeMap","siteMap","contentsList","request","result","parse","map","push","cardViewList","key","contentsType","contentsTypeNo","siteNo","Search","clickBtnSearch","changeInputTitle","changeCheckContentsType","search","value","index","indexOf","checked","splice","log","action","type","name","onChange","htmlFor","id","MoaView","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04db7af4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Header.css';\n\n/**\n * 레이아웃의 상단 영역\n * \n * @author devy\n */\nclass Header extends React.Component {\n\n    constructor() {\n        super();\n        this.clickBtnMenu = this.clickBtnMenu.bind(this);\n        this.state = {\n            isShow : 'show'\n        };\n    }\n\n    clickBtnMenu(e) {\n        e.preventDefault();\n        \n        this.setState({\n            isShow : this.state.isShow === 'show' ? 'hide' : 'show'\n        });\n\n        if(this.props.clickBtnMenu) {\n            this.props.clickBtnMenu(this.state.isShow);\n        }\n    }\n\n    render() {\n        return (\n            <header>\n                <h1>모아뷰</h1>\n                <div className=\"btn-menu\">\n                    <a className={this.state.isShow} href=\"http://www.naver.com/\" onClick={this.clickBtnMenu}>\n                        <svg className=\"show\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                            <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 17h-12v-2h12v2zm0-4h-12v-2h12v2zm0-4h-12v-2h12v2z\" />\n                        </svg>\n                        <svg className=\"hide\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                            <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 17h-12v-2h12v2zm0-4h-12v-2h12v2zm0-4h-12v-2h12v2z\" />\n                        </svg>\n                    </a>\n                </div>\n            </header> \n        );\n    }\n}\n\nexport default Header;","class ContentsListRequest {\n    request(param, callback) {\n        fetch(\"https://devys.kro.kr:8082/contents/list\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, cors, *same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrer: 'no-referrer', // no-referrer, *client\n            body: JSON.stringify(param), // body data type must match \"Content-Type\" header\n        })\n        .then(res => res.json())\n        .then(response => JSON.stringify(response))\n        .then(json => callback(json, param))\n        .catch(error => console.error('Error:', error))\n        ; \n\n    } \n}\n\nexport default ContentsListRequest;","import React from 'react';\n\nimport './CardView.css';\n\n/**\n * 콘텐츠 목록의 아이템\n * \n * @author devy\n */\nclass CardView extends React.Component {\n\n    constructor(props) {\n        super();\n    }\n\n    render() {\n        const thumbnailUrl = this.props.contents.thumbnailUrl;\n        const title = this.props.contents.title;\n        const siteName = this.props.site.siteName;\n        const targetContentsName = this.props.contents.targetContentsName;\n        const year = this.props.contents.regDate.year;\n        const monthValue = this.props.contents.regDate.monthValue;\n        const dayOfMonth = this.props.contents.regDate.dayOfMonth;\n        const hour = this.props.contents.regDate.hour;\n        const minute = this.props.contents.regDate.minute;\n        const second = this.props.contents.regDate.second;\n        const regDate = `${year}년 ${monthValue}월 ${dayOfMonth}일 ${hour}:${minute}:${second}`; \n        const thumbnailClassName = thumbnailUrl.length === 0 ? \"thumbnail hide\" : \"thumbnail\";\n        const thumbnail = (<span className={thumbnailClassName}><img src={thumbnailUrl} alt={title} /></span>);\n\n        return (\n            <article>\n                <a href={this.props.contents.url} target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.clickCardView}>\n                    {thumbnail}\n                    <span className=\"data\">\n                        <span className=\"title\">{title}</span>\n                        <span className=\"site-target\"><i>[{siteName}]</i> {targetContentsName}</span>\n                        <span className=\"reg-date\">{regDate}</span>\n                    </span>\n                </a>\n            </article>\n        );\n    }\n}\n\nexport default CardView;","import React from 'react';\nimport './NextButton.css';\n\n/**\n * 다음 페이지 버튼 \n * \n * @author devy\n */\nclass NextButton extends React.Component {\n\n    render() {\n        return (\n            <div className=\"btn-next\">\n                <button onClick={this.props.onClick}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                        <path d=\"M24 12c0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12 12-5.373 12-12zm-18.005-1.568l1.415-1.414 4.59 4.574 4.579-4.574 1.416 1.414-5.995 5.988-6.005-5.988z\" />\n                    </svg> \n                </button>\n            </div>\n        );\n    }\n}\n\nexport default NextButton;","import React from 'react';\nimport ContentsListRequest from '../request/ContentsListRequest';\nimport CardView from './CardView';\nimport NextButton from './NextButton';\nimport './ContentsList.css';\n\n/**\n * 콘텐츠 목록\n * \n * @author devy\n */\nclass CardViewList extends React.Component {\n\n    constructor(props) {\n        super();\n        this.clickBtnNext = this.clickBtnNext.bind(this);\n        this.contentsListRequestCallback = this.contentsListRequestCallback.bind(this);\n        this.clickBtnNextCallback = this.clickBtnNextCallback.bind(this);\n        this.state = {\n            title : props.title,\n            contentsTypeNoList : props.contentsTypeNoList,\n            pageNo : 1,\n            responseContents : {\n                contentsTypeMap : {},\n                siteMap : {},\n                contentsList : []\n            } \n        };\n    }\n\n    componentDidMount() {\n        var param = {};\n        param.title = this.state.title;\n        param.contentsTypeNoList = this.state.contentsTypeNoList;\n        param.pageNo = this.state.pageNo;\n\n        const req = new ContentsListRequest();\n        req.request(param, this.contentsListRequestCallback);\n    }\n\n    clickBtnNext(e) {\n        e.preventDefault();\n\n        var param = {};\n        param.title = this.state.title;\n        param.contentsTypeNoList = this.state.contentsTypeNoList;\n        param.pageNo = this.state.pageNo + 1;\n\n        const req = new ContentsListRequest();\n        req.request(param, this.clickBtnNextCallback);\n    }\n\n    contentsListRequestCallback(json, param) {\n        const result = JSON.parse(json);\n        this.setState({\n            pageNo : param.pageNo,\n            responseContents : result\n        });\n    }\n\n    clickBtnNextCallback(json, param) {\n        const result = JSON.parse(json);\n        result.contentsList.map( contents => this.state.responseContents.contentsList.push(contents) ); \n        this.setState({\n            pageNo : param.pageNo,\n            responseContents : {\n                contentsTypeMap : result.contentsTypeMap,\n                siteMap : result.siteMap,\n                contentsList : this.state.responseContents.contentsList\n            }\n        });\n    }\n\n    render() {\n        const contentsList = this.state.responseContents.contentsList;\n        let cardViewList;\n\n        if(0 < contentsList.length) {\n            cardViewList = contentsList.map(\n                (contents, key) => {\n                    const contentsType = this.state.responseContents.contentsTypeMap[contents.contentsTypeNo];\n                    const site = this.state.responseContents.siteMap[contents.siteNo];\n                    return <CardView contentsType={contentsType} site={site} contents={contents} key={key} />;\n                } \n            );\n        }\n\n        return (\n            <section className=\"cardview-list\">\n                {cardViewList}\n                <NextButton onClick={this.clickBtnNext} />\n            </section>\n        );\n    }\n}\n\nexport default CardViewList;","import React from 'react';\nimport './Search.css';\n\n/**\n * 검색 영역\n * \n * @author devy\n */\nclass Search extends React.Component {\n\n    constructor() {\n        super();\n        this.clickBtnSearch = this.clickBtnSearch.bind(this);\n        this.changeInputTitle = this.changeInputTitle.bind(this);\n        this.changeCheckContentsType = this.changeCheckContentsType.bind(this);\n        this.state = {\n            title : '',\n            contentsTypeNoList : []\n        }; \n    }\n\n    clickBtnSearch(e) {\n        e.preventDefault();\n        this.props.search(this.state.title, this.state.contentsTypeNoList);\n    }\n\n    changeInputTitle(e) {\n        this.setState({\n            title:e.target.value\n        });\n    }\n\n    changeCheckContentsType(e) {\n        let value = e.target.value;\n        let index = this.state.contentsTypeNoList.indexOf(value);\n\n        if(e.target.checked && index === -1) {\n            this.state.contentsTypeNoList.push(value);   \n        } else if(!e.target.checked && -1 < index) {\n            this.state.contentsTypeNoList.splice(index, 1);\n        }\n\n        console.log(this.state.contentsTypeNoList);\n    }\n\n    render() {\n        let className = this.props.isShow === \"show\" ? \"search show\" :  \"search\";\n\n        return (\n            <section className={className}>\n                <form action=\"https://devys.kro.kr/contents/list\" method=\"post\">\n                    <div>\n                        <input type=\"text\" name=\"sarchWord\" onChange={this.changeInputTitle} />\n                        <button onClick={this.clickBtnSearch}>검색</button>\n                    </div>\n\n                    <ul>\n                        <li> <label htmlFor=\"contentsType1\"> <input id=\"contentsType1\" name=\"contentsType\" type=\"checkbox\" value=\"1\" onChange={this.changeCheckContentsType} /> <span>전체</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType2\"> <input id=\"contentsType2\" name=\"contentsType\" type=\"checkbox\" value=\"2\" onChange={this.changeCheckContentsType} /> <span>커뮤니티</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType3\"> <input id=\"contentsType3\" name=\"contentsType\" type=\"checkbox\" value=\"3\" onChange={this.changeCheckContentsType} /> <span>뉴스</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType4\"> <input id=\"contentsType4\" name=\"contentsType\" type=\"checkbox\" value=\"4\" onChange={this.changeCheckContentsType} /> <span>스포츠</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType5\"> <input id=\"contentsType5\" name=\"contentsType\" type=\"checkbox\" value=\"5\" onChange={this.changeCheckContentsType} /> <span>유머</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType6\"> <input id=\"contentsType6\" name=\"contentsType\" type=\"checkbox\" value=\"6\" onChange={this.changeCheckContentsType} /> <span>연예</span> </label> </li>\n                        <li> <label htmlFor=\"contentsType7\"> <input id=\"contentsType7\" name=\"contentsType\" type=\"checkbox\" value=\"7\" onChange={this.changeCheckContentsType} /> <span>IT</span> </label> </li>\n                    </ul>\n\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Header from './Header';\nimport ContentsList from './ContentsList';\nimport Search from './Search';\n\nimport './MoaView.css';\n\n/**\n * 모아뷰 레이아웃 클래스\n * \n * @author devy\n */\nclass MoaView extends React.Component {\n\n    constructor() {\n        super();\n        this.clickBtnMenu = this.clickBtnMenu.bind(this);\n        this.search = this.search.bind(this); \n        this.state = {\n            title : '',\n            contentsTypeNoList : [],\n            isShow : false\n        };\n    }\n\n    clickBtnMenu(isShow) {\n        this.setState({\n            isShow : isShow\n        });\n    }\n\n    search(title, contentsTypeNoList) {\n        this.setState({\n            title : title,\n            contentsTypeNoList : contentsTypeNoList\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"wrap\">\n                <Header clickBtnMenu={this.clickBtnMenu} />\n                <div className=\"contents-wrap\">\n                    <ContentsList title={this.state.title} contentsTypeNoList={this.state.contentsTypeNoList} /> \n                    <Search isShow={this.state.isShow} search={this.search} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MoaView;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './views/reset.css';\nimport MoaView from './views/MoaView';\n\nReactDOM.render(<MoaView />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}